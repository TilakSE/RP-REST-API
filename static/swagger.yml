openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Person:
      type: "object"
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
        id:
          type: "integer"
        timestamp:
          type: "string"
          format: "date-time"
        notes:
          type: "array"
          items:
            $ref: "#/components/schemas/Note"
    Note:
      type: "object"
      required:
        - content
      properties:
        id:
          type: "integer"
        person_id:
          type: "integer"
        content:
          type: "string"
        timestamp:
          type: "string"
          format: "date-time"
  parameters:
    person_id:
      name: "person_id"
      description: "ID of the person to get"
      in: path
      required: true
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: true
      schema:
        #type: "integer"
        type: "string"

paths:
  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        '200':
          description: "Successfully read people list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Person"
    post:
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
        description: "Person to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        '201':
          description: "Successfully created person"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        '400':
          description: "Invalid input"
        '406':
          description: "Person with the same last name already exists"
  /people/{person_id}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        '200':
          description: "Successfully read person"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        '404':
          description: "Person not found"
    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      requestBody:
        description: "Updated person data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        '200':
          description: "Successfully updated person"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/person_id"
      responses:
        '204':
          description: "Successfully deleted person"
        '404':
          description: "Person not found"
  /notes:
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
          description: "Note to create"
          required: True
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  person_id:
                    #type: "integer"
                    type: "string"
                  content:
                    type: "string"
      responses:
        "201":
          description: "Successfully created a note"
        '404':
          description: "Person not found"
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        '200':
          description: "Successfully read one note"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        '404':
          description: "Note not found"
    put:
      tags:
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
          description: "Successfully updated note"
      requestBody:
        description: "Updated note data"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                content:
                  type: "string"
      responses:
        "200":
          description: "Successfully updated note"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        '404':
          description: "Note not found"
    delete:
      tags:
        - Notes
      operationId: "notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"            
        '404':
          description: "Note not found"